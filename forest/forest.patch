--- a/src/networks/drand.rs	2024-09-06 15:13:42
+++ b/src/networks/drand.rs	2024-09-13 01:21:04
@@ -4,46 +4,76 @@
 use crate::beacon::{ChainInfo, DrandConfig, DrandNetwork};
 use once_cell::sync::Lazy;
 use std::borrow::Cow;
+use std::fs;
+use std::env;
+use serde::{Deserialize};
 
+#[derive(Debug, Deserialize)]
+struct ChainInfoFromFile {
+    public_key: String,
+    period: u64,
+    genesis_time: u64,
+    hash: String,
+    groupHash: String,
+}
+
+fn read_chain_info_from_env() -> ChainInfoFromFile {
+    // Read the file path from the environment variable
+    let file_path = env::var("DRAND_CHAIN_INFO")
+        .expect("DRAND_QUICKNET_FILE environment variable is not set");
+    
+    // Read the file content
+    let file_content = fs::read_to_string(&file_path)
+        .expect("Unable to read the file specified by DRAND_QUICKNET_FILE");
+    
+    // Parse the JSON file into the ChainInfoFromFile struct
+    let chain_info: ChainInfoFromFile = serde_json::from_str(&file_content)
+        .expect("Unable to parse the JSON in the DRAND_QUICKNET_FILE");
+    
+    chain_info
+}
 pub(super) static DRAND_MAINNET: Lazy<DrandConfig<'static>> = Lazy::new(|| {
+    let chain_info_from_file = read_chain_info_from_env();
+
     DrandConfig {
         // https://drand.love/developer/http-api/#public-endpoints
+        
         servers: vec![
-                "https://api.drand.sh".try_into().unwrap(),
-                "https://api2.drand.sh".try_into().unwrap(),
-                "https://api3.drand.sh".try_into().unwrap(),
-                "https://drand.cloudflare.com".try_into().unwrap(),
-                "https://api.drand.secureweb3.com:6875".try_into().unwrap(),
+                "http://10.20.20.21".try_into().unwrap(),
+            "http://10.20.20.22".try_into().unwrap(),
+            "http://10.20.20.23".try_into().unwrap(),
+                
+
             ],
         // https://api.drand.sh/8990e7a9aaed2ffed73dbd7092123d6f289930540d7651336225dc172e51b2ce/info
         chain_info:  ChainInfo {
-            public_key: Cow::Borrowed("868f005eb8e6e4ca0a47c8a77ceaa5309a47978a7c71bc5cce96366b5d7a569937c529eeda66c7293784a9402801af31"),
-            period: 30,
-            genesis_time: 1595431050,
-            hash: Cow::Borrowed("8990e7a9aaed2ffed73dbd7092123d6f289930540d7651336225dc172e51b2ce"),
-            group_hash: Cow::Borrowed("176f93498eac9ca337150b46d21dd58673ea4e3581185f869672e59fa4cb390a"),
+            public_key: Cow::Owned(chain_info_from_file.public_key),
+            period: chain_info_from_file.period.try_into().expect("Value too large for i32"),
+            genesis_time: chain_info_from_file.genesis_time.try_into().expect("Value too large for i32"),
+            hash: Cow::Owned(chain_info_from_file.hash),
+            group_hash: Cow::Owned(chain_info_from_file.groupHash),
         },
         network_type: DrandNetwork::Mainnet,
     }
 });
 
 pub(super) static DRAND_QUICKNET: Lazy<DrandConfig<'static>> = Lazy::new(|| {
+    let chain_info_from_file = read_chain_info_from_env();
+
     DrandConfig {
         // https://drand.love/developer/http-api/#public-endpoints
         servers: vec![
-            "https://api.drand.sh".try_into().unwrap(),
-            "https://api2.drand.sh".try_into().unwrap(),
-            "https://api3.drand.sh".try_into().unwrap(),
-            "https://drand.cloudflare.com".try_into().unwrap(),
-            "https://api.drand.secureweb3.com:6875".try_into().unwrap(),
+            "http://10.20.20.21".try_into().unwrap(),
+            "http://10.20.20.22".try_into().unwrap(),
+            "http://10.20.20.23".try_into().unwrap(),
         ],
         // https://api.drand.sh/52db9ba70e0cc0f6eaf7803dd07447a1f5477735fd3f661792ba94600c84e971/info
         chain_info:  ChainInfo {
-            public_key: Cow::Borrowed("83cf0f2896adee7eb8b5f01fcad3912212c437e0073e911fb90022d3e760183c8c4b450b6a0a6c3ac6a5776a2d1064510d1fec758c921cc22b0e17e63aaf4bcb5ed66304de9cf809bd274ca73bab4af5a6e9c76a4bc09e76eae8991ef5ece45a"),
-            period: 3,
-            genesis_time: 1692803367,
-            hash: Cow::Borrowed("52db9ba70e0cc0f6eaf7803dd07447a1f5477735fd3f661792ba94600c84e971"),
-            group_hash: Cow::Borrowed("f477d5c89f21a17c863a7f937c6a6d15859414d2be09cd448d4279af331c5d3e"),
+            public_key: Cow::Owned(chain_info_from_file.public_key),
+            period: chain_info_from_file.period.try_into().expect("Value too large for i32"),
+            genesis_time: chain_info_from_file.genesis_time.try_into().expect("Value too large for i32"),
+            hash: Cow::Owned(chain_info_from_file.hash),
+            group_hash: Cow::Owned(chain_info_from_file.groupHash),
         },
         network_type: DrandNetwork::Quicknet,
     }

